pollutantmean  <- function(directory, pollutant, id = 1:332) {
files_list  <- list.files(directory, full.names = TRUE)
data  <- data.frame()
for(i in 1:332) {
data  <- rbind(data, read.csv(files_list[i]))
}
data_subset  <- data.frame()
for(i in id) {
data_subset  <- rbind(data_subset, data[data[, "ID"] == i, ])
}
mean(data_subset[data_subset$pollutant], na.rm = TRUE)
}
pollutantmean(d)
make.power  <- function(n) {
pow   <- function(x){
x^n
}
}
cube  <- make.power(3)
squere  <- make.power(2)
cube(3)
cube(2)
cube(2)
squere(2)
squere(3)
make.power(3)
make.power(2)
cube  <- make.power(3)
cube
squere
make.power  <- function(n) {
pow   <- function(x){
x^n
}
}
cube  <- make.power(3)
cube
squere  <- make.power(2)
sqere
squere
make.power
pow
make.power  <- function(n) {
pow   <- function(x){
x^n
}
}
cube  <- make.power(3)
squere  <-  make.power(2)
cube(3)
squere(3)
make.power(3)
make.power(5)
make.power
ls(environment(cube))
get("n", environment(cube))
ls(environment(squere))
get("n", environment(squere))
?ls
?get
get("pow", environment(squere))
y  <- 10
f  <- function(x) {
y  <- 2
y^2 +g(x)
}
g  <- function(x) {
x*y
}
f(3)
f  <- function(x) {
y  <- 2
y^2 +g(x)
}
g  <- function(x) {
x*y
}
f(3)
f  <- function(x) {
y  <- 2
y^2 +g(x)
}
g  <- function(x) {
x*y
}
f(3)
seq(1.7, 1.9)
seq(1.7, 1.9, len = 100)
sys.time
Sys.time
Sys.time()
x  <- Syys.time()
x  <- Sys.time()
x
p  <- as.POSIXlt(x)
p
names(p)
names(unclass(p))
p[1]
p[,1]
p$sec
p[1]
p[,1]
p[p[,1]]
p[p[,1], ]
p$mon
names(unclass(p))
p$min
p$mday
p$min
p$min
p$hour
x  <- Sys.time()
x
p  <- as.POSIXct(x)
p
p
unclass(p)
x  <- matrix(1:6, 2, 3)
x
x[, 2]
x[, 3]
x[2, 3]
x  <- list((a = 1:5), b = rnorm(10))
x
?laplay
??laplay
?laaplay
?lapplay
?lapply
x  <- list((a = 1:5), b = rnorm(10))
lapply(x, mean)
x
x[,1]
x[, 1]
x[1, ]
x$a
x$b
x[,2]
x[2, ]
x[[2]]
x[[1]]
x[[,1]]
x[[1, ]]
x
x  <- list((a = 1:5), b = rnorm(10))
lapply(x, mean)
x  <- list(a = 1:5, b = norm(10))
x  <- list(a = 1:5, b = rnorm(10))
x
x[1]
x[2]
x[2, ]
x[, 2]
x$a
x$b
lapply(x, mean)
x  <- matrix(rnorm(200) 20, 10))
x  <- matrix(rnorm(200), 20, 10))
x  <- matrix(rnorm(200), 20, 10)
x
x
laplay(x, 2, mean)
lapplay(x, 2, mean)
lapply(x, 2, mean)
apply(x, 2, mean)
x
columns  <- ncol(x)
columns
meanbycolumn  <- vector()
for(i in columns) {
menabycolumn  <- c(meanbycolumn, mean[i])
}
menabycolumn  <- c(meanbycolumn, mean[, i])
x
column
columns
meanbycolumn  <- vector()
for(i in columns) {
meanbycolumn  <- c(meanbycolumn, mean(x[i]))
}
meanbycolumn
for(i in 1:columns) {
}
meanbycolumn  <- vector()
for(i in 1:columns) {
meanbycolumn  <- c(meanbycolumn, mean(x[i]))
}
meanbycolumn
meanbycolumn  <- vector()
for(i in 1:columns) {
meanbycolumn  <- c(meanbycolumn, mean(x[, i]))
}
meanbycolumn
apply(x, 2, mean)
apply(x, 1, mean)
meanbycolumn  <- vector()
for(i in 1:columns) {
meanbycolumn  <- c(meanbycolumn, x[i])
}
meanbycolumn
meanbycolumn  <- c(meanbycolumn, mean(x[i ,]))
}
meanbycolumn  <- vector()
for(i in 1:columns) {
meanbycolumn  <- c(meanbycolumn, mean(x[i ,]))
}
meanbycolumn
meanbycolumn  <- vector()
for(i in 1:columns) {
meanbycolumn  <- c(meanbycolumn, x[i ,]))
meanbycolumn  <- vector()
for(i in 1:columns) {
meanbycolumn  <- c(meanbycolumn, x[i ,])
}
meanbycolumn
a  <- array(rnorn(2*2*10))
a  <- array(rnorm(2*2*10))
a
a  <- array(rnorm(2*2*10), c(2, 2, 10))
a
crazy  <- function
crazy <- function() {
x <<- 3.14                   # variable x in the containing environment (global in this case) is updated to be 3.14
print(x)                        # since no local variable 'x' exists within function 'crazy' R searches the containing environments
{ print(x);                     # this is to demonstrate the function, not a code block, is the smallest environment in R
x <- 42; print(x)         # local variable 'x' is declared (created) and assigned the value 42; overrides the variable 'x' in
}                                  # the containing environment
print(x)                       # since local variable 'x' now exists within the function there is no need to search the containing
}                                   # environment (global in this case)
x  <- 0
crazy()
crazy <- function() {
x <<- 3.14                   # variable x in the containing environment (global in this case) is updated to be 3.14
print(x)                        # since no local variable 'x' exists within function 'crazy' R searches the containing environments
{ print(x);                     # this is to demonstrate the function, not a code block, is the smallest environment in R
x <- 42; print(x)         # local variable 'x' is declared (created) and assigned the value 42; overrides the variable 'x' in
}                                  # the containing environment
print(x)                       # since local variable 'x' now exists within the function there is no need to search the containing
}                                   # environment (global in this case)
x <<- 20
crazy()
setwd("C:/Data_science/ProgrammingAssignment2")
source("cachematrix.R")
amarix  <- makeCacheMatrix(matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2))
amatrix  <- makeCacheMatrix(matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2))
rm(amarix)
amatrix
str(amatrix)
amatrix$get()
amatrix[get()]
amatrix[,get()]
amatrix$get()
cacheSolve(amatrix)
amatrix$get_inversed_matrix()
cacheSolve(amatrix)
amatrix$set(matrix(c(0, 5, 99, 66,), nrow = 2, ncol = 2))
amatrix$set(matrix(c(0, 5, 99, 66), nrow = 2, ncol = 2))
cacheSolve(amatrix)
amatrix$get()
amatrix$get_inversed_matrix()
